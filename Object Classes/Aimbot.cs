using Impure.Overlay;
using MDriver.MEME;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using static MDriver.MEME.Requests.Vector3;

namespace Impure.Object_Classes
{
    public class Aimbot
    {
        [System.Runtime.InteropServices.DllImport("user32.dll")]
        public static extern int GetKeyState(int vKey);


        public static float Length(Vector3f Vec)
        {
            return (float)Math.Sqrt((Vec.X * Vec.X) + (Vec.Y * Vec.Y) + (Vec.Z * Vec.Z));
        }

        public static double ToDegree(double radian)
        {
            return ((radian) * (180.0f / Math.PI));
        }

        public static unsafe Requests.Vector2.Vector2f CalcAngles(Vector3f LocalPos, Vector3f EnemyPos)
        {
            Requests.Vector2.Vector2f temp = new Requests.Vector2.Vector2f(0);
            Vector3f relative = LocalPos - EnemyPos;

            float magnitude = Length(relative);
            double pitch = Math.Asin(relative[1] / magnitude);
            double yaw = -Math.Atan2(relative[0], -relative[2]);

            yaw = ToDegree(yaw);
            pitch = ToDegree(pitch);

            temp.X = (float)pitch;
            temp.Y = (float)yaw;
            return temp;
        }

        public static float PredictionDistance(Vector3f value1, Vector3f value2)
        {
            float x = value1.X - value2.X;
            float y = value1.Z - value2.Z;

            return (float)Math.Sqrt((x * x) + (y * y));
        }

        //prediction stuff
        public static Dictionary<float, float> RifleDrop = new Dictionary<float, float>()
        {
            { 12f, 0f },
            { 23f, 0.003799438f },
            { 35f, 0.01844788f },
            { 46f, 0.04354858f },
            { 56f, 0.07858276f },
            { 67f, 0.1229477f },
            { 78f, 0.1759949f },
            { 88f, 0.2370834f },
            { 98f, 0.3056107f },
            { 108f, 0.3810654f },
            { 117f, 0.4630661f },
            { 127f, 0.5513687f },
            { 136f, 0.6458969f },
            { 145f, 0.7467117f },
            { 154f, 0.8540115f },
            { 163f, 0.9680862f },
            { 172f, 1.089279f },
            { 180f, 1.217949f },
            { 189f, 1.354401f },
            { 197f, 1.498863f },
            { 205f, 1.651451f },
            { 213f, 1.812134f },
            { 221f, 1.980728f },
            { 228f, 2.156914f },
            { 236f, 2.34024f },
            { 243f, 2.530167f },
            { 250f, 2.726097f },
            { 257f, 2.927437f },
            { 264f, 3.133629f },
            { 271f, 3.344208f },
            { 277f, 3.558815f },
            { 284f, 3.777252f },
            { 290f, 3.999458f },
            { 297f, 4.22554f },
            { 303f, 4.455719f },
            { 309f, 4.690323f },
            { 315f, 4.929733f },
            { 321f, 5.174347f },
            { 326f, 5.424522f },
            { 332f, 5.680542f },
            { 337f, 5.942574f },
            { 343f, 6.21064f },
            { 348f, 6.484612f },
            { 353f, 6.764221f },
            { 358f, 7.049072f },
            { 363f, 7.338661f },
            { 368f, 7.632446f },
            { 373f, 7.929855f },
            { 378f, 8.230362f },
            { 382f, 8.533516f },
            { 387f, 8.838997f },
            { 392f, 9.146606f },
            { 396f, 9.456306f },
            { 400f, 9.768219f },
            { 404f, 10.08259f },
            { 409f, 10.39976f },
            { 413f, 10.72013f },
            { 417f, 11.04414f },
            { 421f, 11.37218f },
            { 424f, 11.70456f },
            { 428f, 12.04149f },
            { 432f, 12.38303f },
            { 435f, 12.72912f },
            { 439f, 13.07951f },
            { 443f, 13.43384f },
            { 446f, 13.79166f },
            { 449f, 14.15244f },
            { 453f, 14.51563f },
            { 456f, 14.88074f },
            { 459f, 15.24734f },
            { 462f, 15.61509f },
            { 465f, 15.98383f },
            { 468f, 16.35351f },
            { 471f, 16.72426f },
            { 474f, 17.09633f },
            { 477f, 17.47008f },
            { 480f, 17.84592f },
            { 482f, 18.22432f },
            { 485f, 18.60567f },
            { 488f, 18.99032f },
            { 490f, 19.3785f },
            { 493f, 19.77032f },
            { 495f, 20.16573f },
            { 498f, 20.56453f },
            { 500f, 20.96639f },
            { 503f, 21.37088f },
            { 505f, 21.7775f },
            { 507f, 22.18575f },
            { 509f, 22.59511f },
            { 512f, 23.00517f },
            { 514f, 23.41562f },
            { 516f, 23.82627f },
            { 518f, 24.2371f },
            { 520f, 24.64822f },
            { 522f, 25.05989f },
            { 524f, 25.47246f },
            { 526f, 25.88635f },
            { 528f, 26.30202f },
            { 530f, 26.71989f },
            { 531f, 27.14033f },
            { 533f, 27.56358f },
            { 535f, 27.98977f },
            { 537f, 28.41888f },
            { 538f, 28.85074f },
            { 540f, 29.28506f },
            { 542f, 29.72142f },
            { 543f, 30.15936f },
            { 545f, 30.59839f },
            { 546f, 31.03802f },
            { 548f, 31.47784f },
            { 549f, 31.91756f },
            { 551f, 32.35698f },
            { 552f, 32.79607f },
            { 554f, 33.23495f },
            { 555f, 33.67386f },
            { 556f, 34.11314f },
            { 558f, 34.5532f },
            { 559f, 34.99449f },
            { 560f, 35.43744f },
            { 562f, 35.88241f },
            { 563f, 36.32966f },
            { 564f, 36.77934f },
            { 565f, 37.23144f },
            { 566f, 37.68582f },
            { 568f, 38.14222f },
            { 569f, 39.05951f },
            { 570f, 41.81737f },
            { 572f, 42.73313f },
            { 573f, 43.64908f },
            { 575f, 44.56838f },
            { 577f, 45.49397f },
            { 578f, 46.42744f },
            { 580f, 47.36839f },
            { 581f, 48.31461f },
            { 583f, 49.2629f },
            { 584f, 50.21026f },
            { 586f, 51.15498f },
            { 587f, 52.09721f },
            { 588f, 53.03884f },
            { 590f, 53.9827f },
            { 591f, 54.93142f },
            { 592f, 55.88647f },
            { 593f, 56.84763f },
            { 594f, 57.81303f },
            { 595f, 58.77994f },
            { 596f, 59.74577f },
            { 597f, 60.70903f },
            { 599f, 62.14977f },
            { 600f, 63.59108f },
            { 602f, 65.04029f },
            { 603f, 66.5004f },
            { 604f, 67.96784f },
            { 605f, 69.43547f },
            { 606f, 70.89854f },
            { 607f, 72.35826f },
            { 609f, 74.30854f },
            { 610f, 76.27203f },
            { 611f, 78.24505f },
            { 612f, 80.21584f },
            { 613f, 82.18106f },
            { 614f, 84.64154f },
            { 616f, 87.11641f },
            { 617f, 89.59558f },
            { 618f, 92.06863f },
            { 619f, 95.03981f },
            { 620f, 98.02431f },
            { 621f, 101.0076f },
        };

        public static Dictionary<float, float> PistolDrop = new Dictionary<float, float>()
        {
            { 9f, 0f },
            { 19f, 0.007476807f },
            { 28f, 0.02415466f },
            { 36f, 0.04985046f },
            { 45f, 0.08435059f },
            { 53f, 0.1274719f },
            { 61f, 0.1790161f },
            { 70f, 0.2388f },
            { 77f, 0.3066406f },
            { 85f, 0.38237f },
            { 93f, 0.4658203f },
            { 100f, 0.5568085f },
            { 107f, 0.6551819f },
            { 114f, 0.7607727f },
            { 121f, 0.8734283f },
            { 128f, 0.992981f },
            { 134f, 1.119293f },
            { 141f, 1.252213f },
            { 147f, 1.391602f },
            { 153f, 1.537308f },
            { 159f, 1.689194f },
            { 165f, 1.847122f },
            { 171f, 2.010971f },
            { 177f, 2.180603f },
            { 182f, 2.355896f },
            { 187f, 2.536728f },
            { 193f, 2.722977f },
            { 198f, 2.91452f },
            { 203f, 3.111252f },
            { 208f, 3.313049f },
            { 213f, 3.519791f },
            { 217f, 3.731384f },
            { 222f, 3.947723f },
            { 227f, 4.168701f },
            { 231f, 4.394211f },
            { 235f, 4.624161f },
            { 240f, 4.858444f },
            { 244f, 5.096985f },
            { 248f, 5.339676f },
            { 252f, 5.586426f },
            { 256f, 5.837143f },
            { 259f, 6.091751f },
            { 263f, 6.350159f },
            { 267f, 6.612289f },
            { 270f, 6.878052f },
            { 274f, 7.147369f },
            { 277f, 7.420166f },
            { 280f, 7.696365f },
            { 284f, 7.975891f },
            { 287f, 8.258682f },
            { 290f, 8.544647f },
            { 293f, 8.83374f },
            { 296f, 9.12587f },
            { 299f, 9.42099f },
            { 302f, 9.719025f },
            { 304f, 10.0199f },
            { 307f, 10.32356f },
            { 310f, 10.62996f },
            { 312f, 10.93903f },
            { 315f, 11.2507f },
            { 318f, 11.56493f },
            { 320f, 11.88165f },
            { 322f, 12.20082f },
            { 325f, 12.52237f },
            { 327f, 12.84627f },
            { 329f, 13.17244f },
            { 331f, 13.50085f },
            { 334f, 13.83145f },
            { 336f, 14.16418f },
            { 338f, 14.49901f },
            { 340f, 14.83588f },
            { 342f, 15.17476f },
            { 345f, 15.85834f },
            { 347f, 16.20296f },
            { 349f, 16.54941f },
            { 351f, 16.89766f },
            { 353f, 17.24765f },
            { 354f, 17.59937f },
            { 356f, 17.95276f },
            { 358f, 18.30779f },
            { 359f, 18.66441f },
            { 361f, 19.02261f },
            { 362f, 19.38235f },
            { 364f, 19.74359f },
            { 365f, 20.10629f },
            { 366f, 20.47044f },
            { 368f, 20.836f },
            { 369f, 21.20293f },
            { 371f, 21.5712f },
            { 372f, 21.94078f },
            { 373f, 22.31165f },
            { 374f, 22.68378f },
            { 376f, 23.05713f },
            { 377f, 23.43169f },
            { 378f, 23.80742f },
            { 379f, 24.18431f },
            { 380f, 24.56232f },
            { 381f, 24.94144f },
            { 382f, 25.32162f },
            { 383f, 25.70287f },
            { 384f, 26.08514f },
            { 385f, 26.46843f },
            { 387f, 27.23795f },
            { 389f, 28.01123f },
            { 391f, 28.78812f },
            { 393f, 29.56847f },
            { 394f, 30.35211f },
            { 396f, 31.13893f },
            { 398f, 31.92877f },
            { 399f, 32.72151f },
            { 400f, 33.51701f },
            { 402f, 34.31517f },
            { 403f, 35.11586f },
            { 404f, 35.91898f },
            { 405f, 36.72441f },
            { 407f, 37.53206f },
            { 408f, 38.34184f },
            { 409f, 39.15366f },
            { 410f, 39.96741f },
            { 411f, 41.1915f },
            { 412f, 42.41951f },
            { 414f, 43.65117f },
            { 415f, 44.88626f },
            { 416f, 46.12459f },
            { 417f, 47.3659f },
            { 418f, 48.61002f },
            { 420f, 50.27292f },
            { 421f, 51.94009f },
            { 422f, 53.61119f },
            { 423f, 55.28587f },
            { 424f, 57.38382f },
            { 425f, 59.48636f },
            { 426f, 61.593f },
            { 427f, 64.12582f },
            { 429f, 66.66327f },
            { 430f, 69.2048f },
            { 431f, 72.17439f },
            { 432f, 75.14813f },
            { 433f, 78.55103f },
            { 434f, 81.95782f },
            { 435f, 85.36787f },
            { 436f, 89.20744f },
        };

        public static Dictionary<float, float> BowDrop = new Dictionary<float, float>()
        {
            { 2f, 0f },
            { 3f, -0.001823425f },
            { 5f, 0.00353241f },
            { 6f, 0.01607513f },
            { 8f, 0.03579712f },
            { 9f, 0.06269836f },
            { 11f, 0.09677887f },
            { 13f, 0.1380386f },
            { 14f, 0.1864777f },
            { 16f, 0.2420959f },
            { 17f, 0.3048859f },
            { 19f, 0.3748474f },
            { 20f, 0.4519882f },
            { 22f, 0.5363007f },
            { 23f, 0.6277847f },
            { 25f, 0.7264328f },
            { 27f, 0.8322525f },
            { 28f, 0.9452362f },
            { 30f, 1.065392f },
            { 31f, 1.192711f },
            { 33f, 1.327194f },
            { 34f, 1.468842f },
            { 36f, 1.617645f },
            { 37f, 1.773613f },
            { 39f, 1.936737f },
            { 41f, 2.107025f },
            { 42f, 2.28447f },
            { 44f, 2.46907f },
            { 45f, 2.660828f },
            { 48f, 3.065796f },
            { 50f, 3.279007f },
            { 51f, 3.499367f },
            { 53f, 3.726883f },
            { 55f, 3.96154f },
            { 56f, 4.203346f },
            { 58f, 4.452301f },
            { 59f, 4.708397f },
            { 61f, 4.971642f },
            { 62f, 5.242027f },
            { 64f, 5.519554f },
            { 66f, 5.804222f },
            { 67f, 6.096031f },
            { 69f, 6.394974f },
            { 70f, 6.701057f },
            { 72f, 7.014275f },
            { 73f, 7.334633f },
            { 75f, 7.662125f },
            { 77f, 7.996742f },
            { 78f, 8.338493f },
            { 80f, 8.687378f },
            { 81f, 9.043388f },
            { 83f, 9.406532f },
            { 84f, 9.776802f },
            { 86f, 10.1542f },
            { 88f, 10.53872f },
            { 89f, 10.93036f },
            { 91f, 11.32912f },
            { 92f, 11.73502f },
            { 94f, 12.14803f },
            { 96f, 12.56815f },
            { 97f, 12.9954f },
            { 99f, 13.42976f },
            { 100f, 13.87125f },
            { 102f, 14.31984f },
            { 103f, 14.77555f },
            { 105f, 15.23837f },
            { 107f, 15.70831f },
            { 108f, 16.18535f },
            { 110f, 16.6695f },
            { 111f, 17.16077f },
            { 113f, 17.65913f },
            { 115f, 18.1646f },
            { 116f, 18.67719f },
            { 118f, 19.19687f },
            { 119f, 19.72366f },
            { 121f, 20.25755f },
            { 123f, 20.79853f },
            { 124f, 21.34662f },
            { 126f, 21.9018f },
            { 128f, 22.46408f },
            { 129f, 23.03346f },
            { 131f, 23.60994f },
            { 132f, 24.1935f },
            { 134f, 24.78416f },
            { 136f, 25.38192f },
            { 137f, 25.98676f },
            { 139f, 26.59869f },
            { 140f, 27.21771f },
            { 142f, 27.84382f },
            { 144f, 28.47701f },
            { 145f, 29.11729f },
            { 147f, 29.76466f },
            { 149f, 30.4191f },
            { 150f, 31.08063f },
            { 152f, 31.74924f },
            { 154f, 32.42493f },
            { 155f, 33.10769f },
            { 157f, 33.79753f },
            { 159f, 34.49445f },
            { 160f, 35.19844f },
            { 162f, 35.90951f },
            { 163f, 36.62765f },
            { 165f, 37.35286f },
            { 167f, 38.08514f },
            { 168f, 38.82449f },
            { 170f, 39.57092f },
            { 172f, 40.3244f },
            { 173f, 41.08495f },
            { 175f, 41.85257f },
            { 177f, 42.62725f },
            { 178f, 43.409f },
            { 180f, 44.19781f },
            { 182f, 44.99368f },
            { 184f, 45.7966f },
            { 185f, 46.60658f },
            { 187f, 47.42363f },
            { 189f, 48.24773f },
            { 190f, 49.07888f },
            { 192f, 49.91709f },
            { 194f, 50.76235f },
            { 195f, 51.61466f },
            { 197f, 52.47403f },
            { 199f, 53.34045f },
            { 200f, 54.21391f },
            { 202f, 55.09441f },
            { 204f, 55.98197f },
            { 206f, 56.87657f },
            { 207f, 57.77821f },
            { 209f, 58.6869f },
            { 211f, 59.60263f },
            { 213f, 60.52541f },
            { 214f, 61.45522f },
            { 216f, 62.39207f },
            { 218f, 63.33595f },
            { 219f, 64.28688f },
            { 221f, 65.24483f },
            { 223f, 66.20982f },
            { 225f, 67.18185f },
            { 226f, 68.16091f },
            { 228f, 69.147f },
            { 230f, 70.14012f },
            { 232f, 71.14027f },
            { 233f, 72.14745f },
            { 235f, 73.16164f },
            { 237f, 74.18288f },
            { 239f, 75.21112f },
            { 241f, 76.2464f },
            { 242f, 77.2887f },
            { 244f, 78.33801f },
            { 246f, 79.39436f },
            { 248f, 80.45772f },
            { 249f, 81.52809f },
            { 251f, 82.60548f },
            { 253f, 83.6899f },
            { 255f, 84.78131f },
            { 257f, 85.87975f },
            { 258f, 86.9852f },
            { 260f, 88.09766f },
            { 262f, 89.21713f },
            { 264f, 90.34361f },
            { 266f, 91.4771f },
            { 267f, 92.61759f },
            { 269f, 93.76509f },
            { 271f, 94.91959f },
            { 273f, 96.0811f },
            { 275f, 97.24961f },
            { 277f, 98.42513f },
            { 278f, 99.60764f },
            { 280f, 100.7971f },
            { 282f, 101.9937f },
            { 284f, 103.1972f },
            { 286f, 104.4077f },
            { 288f, 105.6252f },
            { 290f, 106.8497f },
            { 291f, 108.0811f },
            { 293f, 109.3196f },
            { 295f, 110.5651f },
            { 297f, 111.8175f },
            { 299f, 113.077f },
            { 301f, 114.3434f },
            { 303f, 115.6168f },
            { 305f, 116.8972f },
            { 307f, 118.1846f },
            { 308f, 119.479f },
            { 310f, 120.7803f },
            { 312f, 122.0887f },
            { 314f, 123.1782f },
            { 315f, 124.1178f },
            { 316f, 125.0976f },
            { 317f, 126.2561f },
            { 318f, 127.5934f },
            { 319f, 128.7917f },
            { 321f, 130.1041f },
            { 322f, 131.5307f },
            { 323f, 133.0713f },
            { 324f, 134.7258f },
            { 325f, 136.4942f },
            { 327f, 138.3765f },
            { 328f, 139.8628f },
            { 329f, 141.4131f },
            { 330f, 143.0272f },
            { 331f, 144.7053f },
            { 332f, 146.4473f },
            { 333f, 148.253f }
        };

        public static Dictionary<float, float> CrossyDrop = new Dictionary<float, float>()
        {
            { 3f, 0f },
            { 5f, 0.008544922f },
            { 7f, 0.0242691f },
            { 9f, 0.04717255f },
            { 12f, 0.07725525f },
            { 14f, 0.1145172f },
            { 16f, 0.1589584f },
            { 19f, 0.2105789f },
            { 21f, 0.2693787f },
            { 23f, 0.33535f },
            { 26f, 0.408493f },
            { 28f, 0.4888077f },
            { 30f, 0.5762939f },
            { 33f, 0.6709518f },
            { 35f, 0.7727814f },
            { 37f, 0.8817749f },
            { 40f, 0.9979401f },
            { 42f, 1.121269f },
            { 44f, 1.251762f },
            { 47f, 1.38942f },
            { 49f, 1.534241f },
            { 51f, 1.686218f },
            { 54f, 1.84536f },
            { 56f, 2.011658f },
            { 58f, 2.185112f },
            { 61f, 2.36573f },
            { 63f, 2.553497f },
            { 65f, 2.748421f },
            { 68f, 2.9505f },
            { 70f, 3.159729f },
            { 73f, 3.376114f },
            { 75f, 3.599648f },
            { 77f, 3.83033f },
            { 80f, 4.068161f },
            { 82f, 4.313133f },
            { 84f, 4.565254f },
            { 87f, 4.824524f },
            { 89f, 5.090935f },
            { 91f, 5.364487f },
            { 94f, 5.64518f },
            { 98f, 6.227989f },
            { 101f, 6.530098f },
            { 103f, 6.839348f },
            { 105f, 7.155731f },
            { 108f, 7.479248f },
            { 110f, 7.809898f },
            { 112f, 8.147682f },
            { 115f, 8.492599f },
            { 117f, 8.844643f },
            { 119f, 9.203819f },
            { 122f, 9.570122f },
            { 124f, 9.94355f },
            { 126f, 10.3241f },
            { 129f, 10.71178f },
            { 131f, 11.10658f },
            { 133f, 11.50851f },
            { 136f, 11.91755f },
            { 138f, 12.33371f },
            { 140f, 12.757f },
            { 143f, 13.1874f },
            { 145f, 13.62492f },
            { 147f, 14.06955f },
            { 150f, 14.52129f },
            { 152f, 14.98016f },
            { 155f, 15.44613f },
            { 157f, 15.91921f },
            { 159f, 16.39941f },
            { 162f, 16.88671f },
            { 164f, 17.38112f },
            { 166f, 17.88264f },
            { 169f, 18.39126f },
            { 171f, 18.90699f },
            { 173f, 19.42982f },
            { 176f, 19.95975f },
            { 178f, 20.49679f },
            { 180f, 21.04092f },
            { 183f, 21.59216f },
            { 185f, 22.15049f },
            { 188f, 22.71592f },
            { 190f, 23.28844f },
            { 192f, 23.86806f },
            { 195f, 24.45477f },
            { 197f, 25.04858f },
            { 199f, 25.64947f },
            { 202f, 26.25746f },
            { 204f, 26.87253f },
            { 206f, 27.49469f },
            { 209f, 28.12394f },
            { 211f, 28.76028f },
            { 214f, 29.40369f },
            { 216f, 30.0542f },
            { 218f, 30.71178f },
            { 221f, 31.37645f },
            { 223f, 32.04819f },
            { 226f, 32.72702f },
            { 228f, 33.41292f },
            { 230f, 34.1059f },
            { 233f, 34.80595f },
            { 235f, 35.51308f },
            { 237f, 36.22728f },
            { 240f, 36.94856f },
            { 242f, 37.67691f },
            { 245f, 38.41232f },
            { 247f, 39.15481f },
            { 249f, 39.90436f },
            { 252f, 40.66098f },
            { 254f, 41.42467f },
            { 257f, 42.19542f },
            { 259f, 42.97323f },
            { 261f, 43.75811f },
            { 264f, 44.55005f },
            { 266f, 45.34904f },
            { 269f, 46.1551f },
            { 271f, 46.96822f },
            { 273f, 47.78839f },
            { 276f, 48.61562f },
            { 278f, 49.4499f },
            { 281f, 50.29123f },
            { 283f, 51.13962f },
            { 285f, 51.99506f },
            { 288f, 52.85755f },
            { 290f, 53.72709f },
            { 293f, 54.60367f },
            { 295f, 55.4873f },
            { 298f, 56.37798f },
            { 300f, 57.27571f },
            { 302f, 58.18047f },
            { 305f, 59.09229f },
            { 307f, 60.01114f },
            { 310f, 60.93703f },
            { 312f, 61.86996f },
            { 315f, 62.80993f },
            { 317f, 63.75694f },
            { 319f, 64.71098f },
            { 322f, 65.67206f },
            { 324f, 66.64017f },
            { 327f, 67.61531f },
            { 329f, 68.59749f },
            { 332f, 69.58669f },
            { 334f, 70.58293f },
            { 337f, 71.58619f },
            { 339f, 72.59648f },
            { 341f, 73.6138f },
            { 344f, 74.63814f },
            { 346f, 75.66951f },
            { 349f, 76.70789f },
            { 351f, 77.7533f },
            { 354f, 78.80574f },
            { 356f, 79.86519f },
            { 359f, 80.93166f },
            { 361f, 82.00514f },
            { 364f, 83.08565f },
            { 366f, 84.17316f },
            { 369f, 85.26769f },
            { 371f, 86.36924f },
            { 374f, 87.4778f },
            { 376f, 88.59336f },
            { 377f, 89.14352f },
            { 378f, 89.69286f },
            { 379f, 90.35677f },
            { 380f, 91.13519f },
            { 381f, 92.02803f },
            { 383f, 93.03522f },
            { 384f, 94.15672f },
            { 385f, 95.39242f },
            { 386f, 96.74226f },
            { 387f, 98.20618f },
            { 389f, 99.7841f },
            { 390f, 101.476f },
            { 391f, 102.8196f },
            { 392f, 104.2272f },
            { 393f, 105.6988f },
            { 394f, 107.2344f },
            { 395f, 108.8339f },
            { 396f, 110.4973f },
            { 397f, 112.2245f },
            { 399f, 114.0156f },
            { 400f, 115.8705f },
            { 401f, 117.7892f },
            { 402f, 119.7716f },
            { 403f, 121.8177f },
            { 405f, 123.9276f },
            { 406f, 126.101f },
            { 407f, 128.3381f },
            { 409f, 130.6388f },
            { 410f, 133.0031f }
        };

        public static Dictionary<float, float> SMGDrop = new Dictionary<float, float>()
        {
            { 10f, 0f },
            { 19f, -0.04847717f },
            { 28f, -0.08652496f },
            { 36f, -0.1143723f },
            { 45f, -0.1322403f },
            { 53f, -0.1403427f },
            { 61f, -0.1389008f },
            { 70f, -0.1281204f },
            { 77f, -0.1082077f },
            { 85f, -0.07935333f },
            { 93f, -0.04176331f },
            { 100f, 0.004371643f },
            { 107f, 0.05886841f },
            { 114f, 0.1215439f },
            { 121f, 0.1922226f },
            { 128f, 0.2707214f },
            { 134f, 0.3568802f },
            { 141f, 0.4505234f },
            { 147f, 0.5514832f },
            { 153f, 0.6596069f },
            { 159f, 0.7747345f },
            { 165f, 0.8967133f },
            { 171f, 1.025398f },
            { 177f, 1.160637f },
            { 182f, 1.302292f },
            { 187f, 1.450218f },
            { 193f, 1.604279f },
            { 198f, 1.764336f },
            { 203f, 1.930267f },
            { 208f, 2.101936f },
            { 213f, 2.279221f },
            { 217f, 2.461998f },
            { 222f, 2.650146f },
            { 227f, 2.843552f },
            { 231f, 3.042099f },
            { 235f, 3.245667f },
            { 240f, 3.454155f },
            { 244f, 3.66745f },
            { 248f, 3.885452f },
            { 252f, 4.108055f },
            { 256f, 4.335159f },
            { 259f, 4.566666f },
            { 263f, 4.802483f },
            { 267f, 5.042511f },
            { 270f, 5.286659f },
            { 274f, 5.534836f },
            { 277f, 5.786957f },
            { 280f, 6.042931f },
            { 284f, 6.302673f },
            { 287f, 6.566109f },
            { 290f, 6.833153f },
            { 293f, 7.103722f },
            { 296f, 7.377747f },
            { 299f, 7.655144f },
            { 302f, 7.935844f },
            { 304f, 8.219772f },
            { 307f, 8.506859f },
            { 310f, 8.797043f },
            { 312f, 9.090248f },
            { 315f, 9.386406f },
            { 317f, 9.685455f },
            { 320f, 9.987335f },
            { 322f, 10.29198f },
            { 325f, 10.59934f },
            { 327f, 10.90934f },
            { 329f, 11.22193f },
            { 331f, 11.53706f },
            { 333f, 11.85466f },
            { 336f, 12.17468f },
            { 338f, 12.49708f },
            { 340f, 12.82179f },
            { 342f, 13.14877f },
            { 343f, 13.47797f },
            { 345f, 13.80933f },
            { 347f, 14.14282f },
            { 349f, 14.47839f },
            { 351f, 14.81598f },
            { 352f, 15.15556f },
            { 354f, 15.49708f },
            { 356f, 15.8405f },
            { 357f, 16.18578f },
            { 359f, 16.53288f },
            { 361f, 16.88175f },
            { 362f, 17.23237f },
            { 364f, 17.58469f },
            { 365f, 17.93867f },
            { 366f, 18.29427f },
            { 368f, 18.65147f },
            { 369f, 19.01022f },
            { 370f, 19.3705f },
            { 372f, 19.73226f },
            { 373f, 20.09548f },
            { 374f, 20.46013f },
            { 375f, 20.82617f },
            { 377f, 21.19358f },
            { 378f, 21.56232f },
            { 379f, 21.93236f },
            { 380f, 22.30367f },
            { 381f, 22.67624f },
            { 382f, 23.05003f },
            { 383f, 23.42501f },
            { 384f, 23.80116f },
            { 385f, 24.17845f },
            { 387f, 24.93636f },
            { 389f, 25.69855f },
            { 391f, 26.46482f },
            { 393f, 27.23502f },
            { 394f, 28.00896f },
            { 396f, 28.78648f },
            { 397f, 29.56742f },
            { 399f, 30.35165f },
            { 400f, 31.13901f },
            { 401f, 31.92937f },
            { 403f, 32.72261f },
            { 404f, 33.5186f },
            { 405f, 34.31721f },
            { 406f, 35.11834f },
            { 407f, 35.92188f },
            { 408f, 36.72771f },
            { 409f, 37.53574f },
            { 411f, 38.75172f },
            { 412f, 39.97214f },
            { 414f, 41.19672f },
            { 415f, 42.42517f },
            { 416f, 43.65726f },
            { 417f, 44.89275f },
            { 418f, 46.13143f },
            { 419f, 47.78761f },
            { 420f, 49.44863f },
            { 422f, 51.1141f },
            { 423f, 52.78363f },
            { 424f, 54.87574f },
            { 425f, 56.97306f },
            { 426f, 59.07503f },
            { 427f, 61.60287f },
            { 428f, 64.13597f },
            { 429f, 67.09705f },
            { 430f, 70.06349f },
            { 431f, 73.03455f },
            { 432f, 76.43483f },
            { 433f, 79.83945f },
            { 435f, 83.67393f },
            { 436f, 87.51217f }
        };

        public static Dictionary<float, float> LMGDrop = new Dictionary<float, float>()
        {
            { 15f, 0f },
            { 30f, -0.004669189f },
            { 45f, -0.001296997f },
            { 59f, 0.009857178f },
            { 73f, 0.02867889f },
            { 87f, 0.05521393f },
            { 101f, 0.08963776f },
            { 114f, 0.1322098f },
            { 127f, 0.1832504f },
            { 140f, 0.2430878f },
            { 153f, 0.3120041f },
            { 165f, 0.3902054f },
            { 177f, 0.4777756f },
            { 189f, 0.5746613f },
            { 201f, 0.6806564f },
            { 212f, 0.7954102f },
            { 224f, 0.9184494f },
            { 235f, 1.04921f },
            { 245f, 1.18708f },
            { 256f, 1.331436f },
            { 266f, 1.481712f },
            { 277f, 1.637413f },
            { 287f, 1.798164f },
            { 297f, 1.963753f },
            { 306f, 2.134102f },
            { 316f, 2.309303f },
            { 325f, 2.489563f },
            { 334f, 2.675186f },
            { 343f, 2.866547f },
            { 352f, 3.064018f },
            { 361f, 3.267944f },
            { 369f, 3.478592f },
            { 377f, 3.696098f },
            { 386f, 3.920479f },
            { 394f, 4.151588f },
            { 401f, 4.389137f },
            { 417f, 4.88179f },
            { 424f, 5.135811f },
            { 431f, 5.394196f },
            { 439f, 5.656403f },
            { 446f, 5.921967f },
            { 452f, 6.190552f },
            { 459f, 6.46196f },
            { 466f, 6.736137f },
            { 472f, 7.013191f },
            { 479f, 7.293358f },
            { 485f, 7.576973f },
            { 491f, 7.864433f },
            { 497f, 8.156151f },
            { 503f, 8.452515f },
            { 509f, 8.753822f },
            { 515f, 9.060272f },
            { 520f, 9.371918f },
            { 526f, 9.68866f },
            { 531f, 10.01026f },
            { 536f, 10.33634f },
            { 542f, 10.66643f },
            { 547f, 10.99999f },
            { 552f, 11.33648f },
            { 557f, 11.67537f },
            { 561f, 12.01622f },
            { 566f, 12.3587f },
            { 571f, 12.70264f },
            { 575f, 13.04797f },
            { 580f, 13.39484f },
            { 584f, 13.74346f },
            { 588f, 14.09421f },
            { 593f, 14.44749f },
            { 597f, 14.80376f },
            { 601f, 15.1634f },
            { 605f, 15.52676f },
            { 609f, 15.89407f },
            { 612f, 16.26543f },
            { 616f, 16.64076f },
            { 620f, 17.01987f },
            { 624f, 17.40241f },
            { 627f, 17.78795f },
            { 631f, 18.17596f },
            { 634f, 18.56593f },
            { 637f, 18.95736f },
            { 641f, 19.3498f },
            { 644f, 19.74294f },
            { 647f, 20.1366f },
            { 650f, 20.53073f },
            { 653f, 20.92545f },
            { 656f, 21.32102f },
            { 659f, 21.71779f },
            { 662f, 22.11618f },
            { 665f, 22.51665f },
            { 668f, 22.91962f },
            { 670f, 23.32545f },
            { 673f, 23.73441f },
            { 676f, 24.14659f },
            { 678f, 24.56199f },
            { 681f, 24.98042f },
            { 683f, 25.40157f },
            { 686f, 25.82502f },
            { 688f, 26.2503f },
            { 691f, 26.67688f },
            { 693f, 27.10428f },
            { 695f, 27.53207f },
            { 697f, 27.95995f },
            { 700f, 28.38771f },
            { 702f, 28.81532f },
            { 704f, 29.2429f },
            { 706f, 29.67068f },
            { 708f, 30.09903f },
            { 710f, 30.52837f },
            { 712f, 30.95914f },
            { 714f, 31.39181f },
            { 716f, 31.82672f },
            { 717f, 32.26415f },
            { 719f, 32.70425f },
            { 721f, 33.14702f },
            { 723f, 33.59229f },
            { 725f, 34.03979f },
            { 726f, 34.48914f },
            { 728f, 34.93985f },
            { 729f, 35.39145f },
            { 731f, 35.84345f },
            { 733f, 36.29546f },
            { 734f, 36.74714f },
            { 736f, 37.19831f },
            { 737f, 37.64893f },
            { 739f, 38.09911f },
            { 740f, 38.54906f },
            { 741f, 38.99915f },
            { 743f, 39.44979f },
            { 744f, 39.90142f },
            { 745f, 40.35448f },
            { 747f, 40.80933f },
            { 748f, 41.26626f },
            { 749f, 41.72543f },
            { 750f, 42.18684f },
            { 752f, 42.65038f },
            { 753f, 43.11579f },
            { 754f, 43.58271f },
            { 755f, 44.0507f },
            { 756f, 44.51931f },
            { 757f, 44.98808f },
            { 759f, 45.4566f },
            { 760f, 45.92458f },
            { 761f, 46.39183f },
            { 762f, 46.85831f },
            { 763f, 47.3241f },
            { 765f, 48.2546f },
            { 766f, 49.18611f },
            { 768f, 50.12188f },
            { 770f, 51.06438f },
            { 772f, 52.01437f },
            { 773f, 52.97057f },
            { 775f, 53.93018f },
            { 776f, 54.88993f },
            { 778f, 55.84731f },
            { 779f, 56.80141f },
            { 781f, 57.7533f },
            { 782f, 58.70542f },
            { 783f, 59.6607f },
            { 785f, 60.62139f },
            { 786f, 61.58824f },
            { 787f, 62.56022f },
            { 788f, 63.53495f },
            { 789f, 64.50961f },
            { 790f, 65.48199f },
            { 791f, 66.45131f },
            { 793f, 67.90176f },
            { 794f, 69.35456f },
            { 795f, 70.81641f },
            { 796f, 72.28833f },
            { 798f, 73.76509f },
            { 799f, 75.23956f },
            { 800f, 76.7086f },
            { 801f, 78.17514f },
            { 802f, 80.13661f },
            { 803f, 82.11138f },
            { 805f, 84.09261f },
            { 806f, 86.06891f },
            { 807f, 88.04006f },
            { 808f, 90.51021f },
            { 809f, 92.99408f },
            { 810f, 95.47858f },
            { 811f, 98.45219f }
        };

        public static Dictionary<float, float> M39Drop = new Dictionary<float, float>()
        {
            { 15f, 0f },
            { 29f, 0.01441956f },
            { 43f, 0.03952789f },
            { 57f, 0.07502747f },
            { 71f, 0.1204758f },
            { 84f, 0.1753235f },
            { 97f, 0.238945f },
            { 110f, 0.3106995f },
            { 122f, 0.3899536f },
            { 135f, 0.4761505f },
            { 147f, 0.5688248f },
            { 159f, 0.6676559f },
            { 170f, 0.7724762f },
            { 182f, 0.8832626f },
            { 193f, 1.000145f },
            { 204f, 1.123367f },
            { 215f, 1.253242f },
            { 226f, 1.390137f },
            { 236f, 1.534393f },
            { 246f, 1.686302f },
            { 256f, 1.846054f },
            { 266f, 2.013702f },
            { 276f, 2.189171f },
            { 295f, 2.562492f },
            { 304f, 2.759483f },
            { 313f, 2.962639f },
            { 321f, 3.171364f },
            { 330f, 3.385071f },
            { 338f, 3.603233f },
            { 347f, 3.825432f },
            { 355f, 4.051376f },
            { 363f, 4.280922f },
            { 371f, 4.514084f },
            { 378f, 4.751015f },
            { 386f, 4.991989f },
            { 393f, 5.237366f },
            { 401f, 5.487541f },
            { 408f, 5.742905f },
            { 415f, 6.003792f },
            { 422f, 6.270447f },
            { 428f, 6.542984f },
            { 435f, 6.821373f },
            { 442f, 7.105431f },
            { 448f, 7.394836f },
            { 454f, 7.689156f },
            { 460f, 7.987862f },
            { 466f, 8.29039f },
            { 472f, 8.596191f },
            { 478f, 8.90477f },
            { 484f, 9.215721f },
            { 489f, 9.52877f },
            { 495f, 9.843796f },
            { 500f, 10.16082f },
            { 505f, 10.48001f },
            { 511f, 10.80166f },
            { 516f, 11.12615f },
            { 521f, 11.4539f },
            { 526f, 11.78534f },
            { 530f, 12.12083f },
            { 535f, 12.46066f },
            { 540f, 12.80498f },
            { 544f, 13.15379f },
            { 549f, 13.50697f },
            { 553f, 13.86423f },
            { 557f, 14.22516f },
            { 562f, 14.58928f },
            { 566f, 14.95605f },
            { 570f, 15.32494f },
            { 574f, 15.69547f },
            { 578f, 16.06724f },
            { 581f, 16.43999f },
            { 585f, 16.81361f },
            { 589f, 17.18812f },
            { 593f, 17.56369f },
            { 596f, 17.94063f },
            { 600f, 18.31933f },
            { 603f, 18.70023f },
            { 606f, 19.08376f },
            { 610f, 19.47031f },
            { 613f, 19.86021f },
            { 616f, 20.25364f },
            { 619f, 20.65063f },
            { 622f, 21.05109f },
            { 625f, 21.45477f },
            { 628f, 21.86127f },
            { 631f, 22.27016f },
            { 634f, 22.6809f },
            { 637f, 23.09299f },
            { 639f, 23.50597f },
            { 642f, 23.91943f },
            { 645f, 24.33313f },
            { 647f, 24.74693f },
            { 650f, 25.16087f },
            { 652f, 25.57513f },
            { 655f, 25.98999f },
            { 657f, 26.40586f },
            { 659f, 26.82318f },
            { 662f, 27.2424f },
            { 664f, 27.66393f },
            { 666f, 28.08809f },
            { 668f, 28.5151f },
            { 671f, 28.94502f },
            { 673f, 29.37778f },
            { 675f, 29.81316f },
            { 677f, 30.25081f },
            { 679f, 30.69028f },
            { 681f, 31.1311f },
            { 683f, 31.57276f },
            { 685f, 32.01479f },
            { 686f, 32.45683f },
            { 688f, 32.89861f },
            { 690f, 33.34f },
            { 692f, 33.78102f },
            { 693f, 34.22185f },
            { 695f, 34.66277f },
            { 697f, 35.10419f },
            { 698f, 35.54652f },
            { 700f, 35.99023f },
            { 702f, 36.43573f },
            { 703f, 36.88335f },
            { 705f, 37.33333f },
            { 706f, 37.78574f },
            { 707f, 38.24055f },
            { 709f, 38.69754f },
            { 710f, 39.1564f },
            { 712f, 39.61672f },
            { 713f, 40.07803f },
            { 714f, 40.53986f },
            { 716f, 41.00175f },
            { 717f, 41.46334f },
            { 718f, 41.92437f },
            { 719f, 42.38472f },
            { 721f, 42.8444f },
            { 722f, 43.30357f },
            { 723f, 43.76249f },
            { 724f, 44.22155f },
            { 725f, 44.68116f },
            { 726f, 45.14176f },
            { 727f, 45.60376f },
            { 728f, 46.06749f },
            { 729f, 46.53318f },
            { 731f, 47.00093f },
            { 732f, 47.47071f },
            { 733f, 48.41555f },
            { 735f, 49.3651f },
            { 737f, 50.31593f },
            { 739f, 51.26507f },
            { 741f, 52.21104f },
            { 742f, 53.15443f },
            { 744f, 54.09752f },
            { 745f, 55.0434f },
            { 747f, 55.99475f },
            { 748f, 56.95285f },
            { 750f, 57.91707f },
            { 751f, 58.88517f },
            { 752f, 59.8541f },
            { 753f, 60.82118f },
            { 755f, 61.78511f },
            { 756f, 62.74633f },
            { 757f, 63.70681f },
            { 758f, 64.6692f },
            { 759f, 65.63585f },
            { 760f, 66.60789f },
            { 761f, 68.07472f },
            { 763f, 69.54575f },
            { 764f, 71.01334f },
            { 765f, 72.47504f },
            { 767f, 73.93497f },
            { 768f, 75.39986f },
            { 769f, 76.87367f },
            { 770f, 78.3546f },
            { 771f, 80.32988f },
            { 772f, 82.29755f },
            { 774f, 84.26263f },
            { 775f, 86.2358f },
            { 776f, 88.21949f },
            { 777f, 90.70036f },
            { 778f, 93.17319f },
            { 779f, 95.64885f },
            { 780f, 98.1361f },
            { 781f, 101.1227f }
        };

        public static Dictionary<float, float> NailDrop = new Dictionary<float, float>()
        {
            { 2f, 0f },
            { 3f, 0.006149292f },
            { 5f, 0.01948547f },
            { 6f, 0.04000854f },
            { 8f, 0.06770325f },
            { 9f, 0.1025848f },
            { 11f, 0.1446381f },
            { 13f, 0.1938782f },
            { 14f, 0.2502899f },
            { 16f, 0.3138733f },
            { 17f, 0.3846283f },
            { 19f, 0.4625549f },
            { 20f, 0.5476532f },
            { 22f, 0.6399231f },
            { 23f, 0.7393646f },
            { 25f, 0.8459778f },
            { 27f, 0.9597626f },
            { 28f, 1.080704f },
            { 30f, 1.208817f },
            { 31f, 1.344086f },
            { 33f, 1.486526f },
            { 34f, 1.636124f },
            { 36f, 1.792877f },
            { 37f, 1.956802f },
            { 39f, 2.127884f },
            { 41f, 2.306122f },
            { 42f, 2.491516f },
            { 44f, 2.684067f },
            { 45f, 2.883774f },
            { 47f, 3.090622f },
            { 48f, 3.304626f },
            { 50f, 3.525787f },
            { 51f, 3.754089f },
            { 53f, 3.98954f },
            { 55f, 4.23214f },
            { 56f, 4.481888f },
            { 58f, 4.738777f },
            { 59f, 5.002815f },
            { 61f, 5.273994f },
            { 62f, 5.552315f },
            { 64f, 5.837776f },
            { 66f, 6.130379f },
            { 67f, 6.430115f },
            { 69f, 6.736992f },
            { 70f, 7.051003f },
            { 72f, 7.372147f },
            { 73f, 7.700424f },
            { 75f, 8.035835f },
            { 77f, 8.37838f },
            { 78f, 8.72805f },
            { 80f, 9.084854f },
            { 81f, 9.448784f },
            { 83f, 9.819839f },
            { 84f, 10.19802f },
            { 86f, 10.58333f },
            { 88f, 10.97576f },
            { 89f, 11.37532f },
            { 91f, 11.782f },
            { 92f, 12.19579f },
            { 94f, 12.61671f },
            { 96f, 13.04474f },
            { 97f, 13.47989f },
            { 99f, 13.92216f },
            { 100f, 14.37154f },
            { 102f, 14.82804f },
            { 104f, 15.29165f },
            { 107f, 16.2402f },
            { 108f, 16.72514f },
            { 110f, 17.21719f },
            { 112f, 17.71634f },
            { 113f, 18.2226f },
            { 115f, 18.73597f },
            { 116f, 19.25644f },
            { 118f, 19.78401f },
            { 120f, 20.31869f },
            { 121f, 20.86046f },
            { 123f, 21.40933f },
            { 124f, 21.9653f },
            { 126f, 22.52837f },
            { 128f, 23.09854f },
            { 129f, 23.6758f },
            { 131f, 24.26015f },
            { 132f, 24.8516f },
            { 134f, 25.45014f },
            { 136f, 26.05577f },
            { 137f, 26.66849f },
            { 139f, 27.28829f },
            { 141f, 27.91518f },
            { 142f, 28.54916f },
            { 144f, 29.19022f },
            { 146f, 29.83837f },
            { 147f, 30.4936f },
            { 149f, 31.15591f },
            { 150f, 31.82531f },
            { 152f, 32.50178f },
            { 154f, 33.18533f },
            { 155f, 33.87595f },
            { 157f, 34.57365f },
            { 159f, 35.27843f },
            { 160f, 35.99029f },
            { 162f, 36.70921f },
            { 164f, 37.43521f },
            { 165f, 38.16827f },
            { 167f, 38.90841f },
            { 169f, 39.65561f },
            { 170f, 40.40988f },
            { 172f, 41.17122f },
            { 174f, 41.93962f },
            { 175f, 42.71509f },
            { 177f, 43.49762f },
            { 179f, 44.28721f },
            { 180f, 45.08386f },
            { 182f, 45.88757f },
            { 184f, 46.69834f },
            { 185f, 47.51617f },
            { 187f, 48.34105f },
            { 189f, 49.17299f },
            { 191f, 50.01198f },
            { 192f, 50.85802f },
            { 194f, 51.71112f },
            { 196f, 52.57127f },
            { 197f, 53.43846f },
            { 199f, 54.31271f },
            { 201f, 55.194f },
            { 202f, 56.08234f },
            { 204f, 56.97772f },
            { 206f, 57.88015f },
            { 208f, 58.78962f },
            { 209f, 59.70613f },
            { 211f, 60.62968f },
            { 213f, 61.56028f },
            { 215f, 62.49791f },
            { 216f, 63.44257f },
            { 218f, 64.39428f },
            { 220f, 65.35302f },
            { 221f, 66.31879f },
            { 223f, 67.2916f },
            { 225f, 68.27144f },
            { 227f, 69.25832f },
            { 229f, 70.25221f },
            { 230f, 71.25314f },
            { 232f, 72.26109f },
            { 234f, 73.27608f },
            { 236f, 74.29808f },
            { 237f, 75.32711f },
            { 239f, 76.36316f },
            { 241f, 77.40623f },
            { 243f, 78.45634f },
            { 244f, 79.51346f },
            { 246f, 80.57759f },
            { 248f, 81.64874f },
            { 250f, 82.72691f },
            { 252f, 83.8121f },
            { 253f, 84.9043f },
            { 255f, 86.00352f },
            { 257f, 87.10974f },
            { 259f, 88.22298f },
            { 261f, 89.34322f },
            { 262f, 90.47047f },
            { 264f, 91.60474f },
            { 266f, 92.74601f },
            { 268f, 93.89429f },
            { 270f, 95.04957f },
            { 272f, 96.21185f },
            { 273f, 97.38113f },
            { 275f, 98.55743f },
            { 277f, 99.74072f },
            { 279f, 100.931f },
            { 281f, 102.1283f },
            { 283f, 103.3326f },
            { 285f, 104.5438f },
            { 286f, 105.7621f },
            { 288f, 106.9874f },
            { 290f, 108.2196f },
            { 292f, 109.4589f },
            { 294f, 110.7051f },
            { 296f, 111.9584f }
        };

        public static Dictionary<float, float> PumpyDrop = new Dictionary<float, float>()
        {
            { 7f, 0f },
            { 14f, 0.009399414f },
            { 21f, 0.0280304f },
            { 27f, 0.05570984f },
            { 34f, 0.0922699f },
            { 40f, 0.1375427f },
            { 47f, 0.1913605f },
            { 53f, 0.2535706f },
            { 59f, 0.3240204f },
            { 65f, 0.4025421f },
            { 70f, 0.4889984f },
            { 76f, 0.5832367f },
            { 82f, 0.6851044f },
            { 87f, 0.7944641f },
            { 93f, 0.9111786f },
            { 98f, 1.035095f },
            { 103f, 1.166092f },
            { 113f, 1.448792f },
            { 118f, 1.600235f },
            { 123f, 1.75824f },
            { 128f, 1.922684f },
            { 132f, 2.093445f },
            { 137f, 2.270401f },
            { 141f, 2.453445f },
            { 146f, 2.642456f },
            { 150f, 2.837326f },
            { 154f, 3.037933f },
            { 158f, 3.244186f },
            { 162f, 3.455978f },
            { 166f, 3.673187f },
            { 170f, 3.895721f },
            { 174f, 4.123489f },
            { 178f, 4.356384f },
            { 182f, 4.594315f },
            { 185f, 4.837189f },
            { 189f, 5.0849f },
            { 192f, 5.337372f },
            { 196f, 5.594513f },
            { 199f, 5.856232f },
            { 202f, 6.122452f },
            { 206f, 6.393066f },
            { 209f, 6.668015f },
            { 212f, 6.947205f },
            { 215f, 7.23056f },
            { 218f, 7.518005f },
            { 221f, 7.809464f },
            { 224f, 8.104858f },
            { 227f, 8.404114f },
            { 230f, 8.707153f },
            { 232f, 9.013916f },
            { 235f, 9.324326f },
            { 238f, 9.638321f },
            { 240f, 9.955826f },
            { 243f, 10.27678f },
            { 245f, 10.60112f },
            { 248f, 10.92877f },
            { 250f, 11.25969f },
            { 252f, 11.5938f },
            { 255f, 11.93105f },
            { 257f, 12.27136f },
            { 259f, 12.6147f },
            { 261f, 12.961f },
            { 264f, 13.31021f },
            { 266f, 13.66228f },
            { 268f, 14.01714f },
            { 270f, 14.37474f },
            { 272f, 14.73505f },
            { 274f, 15.09799f },
            { 276f, 15.46353f },
            { 278f, 15.83162f },
            { 279f, 16.20221f },
            { 281f, 16.57525f },
            { 283f, 16.9507f },
            { 285f, 17.32851f },
            { 286f, 17.70863f },
            { 288f, 18.09103f },
            { 290f, 18.47566f },
            { 291f, 18.86248f },
            { 293f, 19.25144f },
            { 295f, 19.64251f },
            { 296f, 20.03565f },
            { 298f, 20.43082f },
            { 299f, 20.82797f },
            { 301f, 21.22709f },
            { 302f, 21.62812f },
            { 303f, 22.03103f },
            { 305f, 22.43578f },
            { 306f, 22.84235f },
            { 308f, 23.2507f },
            { 309f, 23.66079f },
            { 310f, 24.07259f },
            { 311f, 24.48608f },
            { 313f, 24.90121f },
            { 314f, 25.31796f },
            { 315f, 25.73628f },
            { 316f, 26.15617f },
            { 317f, 26.57759f },
            { 318f, 27.0005f },
            { 320f, 27.42489f },
            { 321f, 27.85072f },
            { 322f, 28.27796f },
            { 323f, 28.7066f },
            { 324f, 29.1366f },
            { 325f, 29.56793f },
            { 327f, 30.43452f },
            { 329f, 31.30616f },
            { 331f, 32.18267f },
            { 332f, 33.06387f },
            { 334f, 33.94959f },
            { 336f, 34.83965f },
            { 337f, 35.7339f },
            { 339f, 36.63218f },
            { 340f, 37.53433f },
            { 342f, 38.44022f },
            { 344f, 39.80575f },
            { 345f, 40.72038f },
            { 347f, 41.63828f },
            { 348f, 42.55934f },
            { 349f, 43.48343f },
            { 350f, 44.41044f },
            { 351f, 45.34026f },
            { 352f, 46.2728f },
            { 353f, 47.20793f },
            { 354f, 48.14558f },
            { 356f, 49.55655f },
            { 358f, 51.44579f },
            { 359f, 52.86832f },
            { 360f, 54.29534f },
            { 362f, 55.72662f },
            { 363f, 57.16193f },
            { 364f, 58.60102f },
            { 365f, 60.0437f },
            { 366f, 61.48978f },
            { 367f, 63.42282f },
            { 369f, 65.36115f },
            { 370f, 67.30436f },
            { 371f, 69.25211f },
            { 372f, 71.20407f },
            { 373f, 73.15992f },
            { 374f, 75.11939f },
            { 375f, 77.57342f },
            { 376f, 80.03221f },
            { 378f, 82.49533f },
            { 379f, 84.96239f },
            { 380f, 87.43304f },
            { 381f, 89.90696f },
            { 382f, 92.87955f },
            { 383f, 95.85596f },
            { 384f, 98.83578f },
            { 385f, 101.8186f }
        };

        public static ulong Camer_Pos = 0;
        public static ulong Input = 0;

        public static float BulletSpeed = 0;

        public static PlayerClass TargetPlayer = null;
        public static Dictionary<float, float> DickDrop = new Dictionary<float, float>()
            {
            { 0f, 0f },
        };



        public void DumpPOS()
        {
            //nop this GameAssembly.dll+37A6B3
            //int Frame = 0;
            //float StartZ = 0;
            //float dist = 0;
            //string Dump = "";
            //while (true)
            //{
            //    Memory.MEMAPI.WriteVector2f(Input, new Requests.Vector2.Vector2f(0));
            //    var BulletPOS = Memory.MEMAPI.ReadVector3f(Memory.MEMAPI.GetPointer(Local.LocalPlayer.HeldWeapon + 0x90, 0x338, 0x10, 0x20, 0x124));
            //    float Distance = Requests.Vector3.Vector3f.Distance(Local.LocalPlayer.Position, BulletPOS);
            //    //Debug.WriteLine(BulletPOS.ToString());
            //    if (BulletPOS != Requests.Vector3.Vector3f.Zero && Distance > dist)
            //    {
            //        if (Frame == 0)
            //        {
            //            StartZ = BulletPOS.Y;
            //        }
            //        Render.BULLSHIT[Frame] = BulletPOS;
            //        Frame += 1;
            //        dist = Distance + 1;
            //        //Debug.WriteLine("Drop is " + (StartZ - BulletPOS.Y).ToString() + " @ " + Math.Round(Distance).ToString() + "M");
            //        Debug.WriteLine("{ " + Math.Round(Distance).ToString() + "f, " + (StartZ - BulletPOS.Y).ToString() + "f },");
            //    }
            //    Thread.Sleep(1);
            //}
        }

        public static float Horizontal_Factor = 50f;
        public static bool HasTarget = false;
        public static int[] RandomBones = new int[] { 50, 49, 47, 23, 56, 25, 22, 1, 14, 2 };
        public static int AimBone = 50;
        public void GamerChair()
        {
            //DickDrop = RifleDrop;

            Vector3f LastPOS = new Vector3f(0);
            float PredictX = 0;
            float PredictZ = 0;
            int frame = 0;
            while (true)
            {
                if (Options.CB_Aimbot)
                {
                    try
                    {
                        int res = GetKeyState(02);
                        if ((res & 0x8000) != 0)
                        {
                            if (Input != 0 && TargetPlayer != null && !TargetPlayer.IsDead)
                            {
                                HasTarget = true;
                                Vector3f MyPOS = Memory.MEMAPI.ReadVector3f(Camer_Pos);
                                Vector3f Target_HeadPOS_Vec3 = new Vector3f(0);


                                if (TargetPlayer.IsNPC)
                                {
                                    Target_HeadPOS_Vec3 = UnityFunctions.GetBonePosition(TargetPlayer.HeadBone);
                                }
                                else
                                {
                                    //Target_HeadPOS_Vec3 = UnityFunctions.GetBonePosition(TargetPlayer.HeadBone);
                                    Target_HeadPOS_Vec3 = UnityFunctions.GetBonePosition(TargetPlayer.tryGetBone(AimBone));
                                }


                                if (LastPOS == Vector3f.Zero)
                                {
                                    LastPOS = Target_HeadPOS_Vec3;
                                }

                                if (frame >= 50)
                                {
                                    PredictX = LastPOS.X - Target_HeadPOS_Vec3.X;
                                    PredictZ = LastPOS.Z - Target_HeadPOS_Vec3.Z;
                                    LastPOS = Target_HeadPOS_Vec3;
                                    frame = 0;
                                }
                                float Distance = Vector3f.Distance(MyPOS, Target_HeadPOS_Vec3);

                                //vertical prediction
                                var keys = new List<float>(DickDrop.Keys);
                                var index = keys.BinarySearch(Distance);
                                index = index * -1;

                                Target_HeadPOS_Vec3.Y += DickDrop.ElementAt(index).Value;

                                //horizontal prediction
                                float timeToTravel = Distance / Horizontal_Factor;
                                Target_HeadPOS_Vec3.X -= PredictX * timeToTravel;
                                Target_HeadPOS_Vec3.Z -= PredictZ * timeToTravel;

                                frame++;
                                var Angles = CalcAngles(MyPOS, Target_HeadPOS_Vec3);
                                if (Angles.X > -90 && Angles.X < 90 && Angles.Y > -360 && Angles.Y < 360)
                                {
                                    Memory.MEMAPI.WriteVector2f(Input, Angles);
                                }
                            }
                            else
                            {
                                LastPOS = Vector3f.Zero;
                                PredictX = 0;
                                PredictZ = 0;
                                frame = 0;
                                HasTarget = false;
                            }
                        }
                        else
                        {
                            LastPOS = Vector3f.Zero;
                            PredictX = 0;
                            PredictZ = 0;
                            frame = 0;
                            HasTarget = false;
                        }
                    }
                    catch
                    {
                        continue;
                    }
                    Thread.Sleep(1);
                }
                else
                {
                    Thread.Sleep(500);
                }
            }
        }
    }
}
